{
    "patches": [
        {
            "label": "2025-10-27_21-30-32",
            "content": "@@ -1,784 +0,0 @@\n-class Pessoa:%0A    def __init__(self, nome: str, dinheiro: float):%0A        self.nome = nome%0A        self.dinheiro = dinheiro%0A%0A    def pagar(self, valor: float) -%3E float:%0A        if self.dinheiro %3E= valor:%0A            self.dinheiro -= valor%0A            print(f%22%5B%7Bself.nome%7D%5D Pagou R$ %7Bvalor:.2f%7D.%22)%0A            return valor%0A        else:%0A            valor_pago = self.dinheiro%0A            self.dinheiro = 0%0A            print(f%22%5B%7Bself.nome%7D%5D N%C3%A3o tinha R$ %7Bvalor:.2f%7D, pagou apenas R$ %7Bvalor_pago:.2f%7D.%22)%0A            return valor_pago%0A%0A    def receber(self, valor: float):%0A        %22%22%22Recebe um valor em dinheiro.%22%22%22%0A        self.dinheiro += valor%0A        print(f%22%5B%7Bself.nome%7D%5D Recebeu R$ %7Bvalor:.2f%7D.%22)%0A%0A    def __str__(self) -%3E str:%0A        return f%22%7Bself.nome%7D (R$ %7Bself.dinheiro:.2f%7D)%22\n",
            "lines": "0"
        },
        {
            "label": "2025-10-28_11-39-15",
            "content": "@@ -76,6821 +76,709 @@\n elf.\n-__nome = nome%0A        self.__dinheiro = dinheiro%0A%0A    def get_nome(self) -%3E str:%0A        return self.__nome%0A%0A    def get_dinheiro(self) -%3E float:%0A        return self.__dinheiro%0A%0A%0A    def pagar(self, valor: float) -%3E float:%0A%0A        if valor %3C 0:%0A            return 0.0%0A        if self.__dinheiro %3E= valor:%0A            self.__dinheiro -= valor%0A            print(f%22%5B%7Bself.__nome%7D%5D Pagou R$ %7Bvalor:.2f%7D.%22)%0A            return valor%0A        else:%0A            valor_pago = self.__dinheiro%0A            self.__dinheiro = 0.0%0A            print(f%22%5B%7Bself.__nome%7D%5D Insuficiente! Pagou apenas R$ %7Bvalor_pago:.2f%7D.%22)%0A            return valor_pago%0A%0A    def receber(self, valor: float):%0A        if valor %3E 0:%0A            self.__dinheiro += valor%0A            print(f%22%5B%7Bself.__nome%7D%5D Recebeu R$ %7Bvalor:.2f%7D.%22)%0A%0A    def __str__(self) -%3E str:%0A        return f%22Pessoa%5BNome: %7Bself.__nome%7D, Dinheiro: R$ %7Bself.__dinheiro:.2f%7D%5D%22%0A%0A# class Moto:%0A#     %22%22%22%0A#     Representa a moto, gerenciando o motorista, o passageiro e o custo da corrida.%0A#     %22%22%22%0A    %0A#     def __init__(self):%0A#         %22%22%22%0A#         Inicializa a Moto.%0A        %0A#         Atributos:%0A#             __motorista (Pessoa %7C None): O motorista atual (privado).%0A#             __passageiro (Pessoa %7C None): O passageiro atual (privado).%0A#             __custo (float): O custo acumulado da corrida atual (privado).%0A#         %22%22%22%0A#         # Usamos 'Optional%5BPessoa%5D' ou 'Pessoa %7C None' para tipagem%0A#         self.__motorista: Optional%5BPessoa%5D = None%0A#         self.__passageiro: Optional%5BPessoa%5D = None%0A#         self.__custo: float = 0.0%0A%0A#     # --- Modificadores de Acesso (Getters) ---%0A    %0A#     def get_motorista(self) -%3E Optional%5BPessoa%5D:%0A#         %22%22%22Retorna o objeto Pessoa do motorista, ou None se vazio.%22%22%22%0A#         return self.__motorista%0A%0A#     def get_passageiro(self) -%3E Optional%5BPessoa%5D:%0A#         %22%22%22Retorna o objeto Pessoa do passageiro, ou None se vazio.%22%22%22%0A#         return self.__passageiro%0A%0A#     def get_custo(self) -%3E float:%0A#         %22%22%22Retorna o custo atual da corrida.%22%22%22%0A#         return self.__custo%0A%0A#     # --- M%C3%A9todos %22Internos%22 (Privados/Protegidos) ---%0A#     # Usamos '_' (protegido) para m%C3%A9todos que s%C3%B3 devem ser chamados por outros m%C3%A9todos da classe%0A    %0A#     def _iniciar_corrida(self):%0A#         %22%22%22M%C3%A9todo interno para zerar o custo ao iniciar uma nova corrida.%22%22%22%0A#         self.__custo = 0.0%0A%0A#     def _adicionar_custo(self, valor: float):%0A#         %22%22%22M%C3%A9todo interno para adicionar valor ao custo da corrida.%22%22%22%0A#         if valor %3E 0:%0A#             self.__custo += valor%0A%0A#     # --- M%C3%A9todos Necess%C3%A1rios (A%C3%A7%C3%B5es P%C3%BAblicas) ---%0A%0A#     def subir_motorista(self, motorista: Pessoa) -%3E bool:%0A#         %22%22%22%0A#         Permite que um motorista suba na moto.%0A#         S%C3%B3 pode subir se n%C3%A3o houver outro motorista e se n%C3%A3o houver passageiro.%0A#         %22%22%22%0A#         if self.__motorista is not None:%0A#             print(f%22fail: Ja existe um motorista (%7Bself.__motorista.get_nome()%7D).%22)%0A#             return False%0A        %0A#         if self.__passageiro is not None:%0A#             print(%22fail: Nao pode trocar de motorista durante uma corrida.%22)%0A#             return False%0A            %0A#         self.__motorista = motorista%0A#         print(f%22ok: %7Bmotorista.get_nome()%7D subiu como motorista.%22)%0A#         return True%0A%0A#     def descer_motorista(self) -%3E bool:%0A#         %22%22%22%0A#         Permite que o motorista des%C3%A7a.%0A#         S%C3%B3 pode descer se n%C3%A3o houver um passageiro (corrida em andamento).%0A#         %22%22%22%0A#         if self.__motorista is None:%0A#             print(%22fail: Moto ja esta sem motorista.%22)%0A#             return False%0A            %0A#         if self.__passageiro is not None:%0A#             print(%22fail: Motorista nao pode descer durante uma corrida.%22)%0A#             return False%0A            %0A#         print(f%22ok: %7Bself.__motorista.get_nome()%7D desceu da moto.%22)%0A#         self.__motorista = None%0A#         return True%0A%0A#     def subir_passageiro(self, passageiro: Pessoa) -%3E bool:%0A#         %22%22%22%0A#         Permite que um passageiro suba na moto.%0A#         S%C3%B3 pode subir se houver um motorista e se n%C3%A3o houver outro passageiro.%0A#         %22%22%22%0A#         if self.__motorista is None:%0A#             print(%22fail: Impossivel subir, moto sem motorista.%22)%0A#             return False%0A            %0A#         if self.__passageiro is not None:%0A#             print(f%22fail: Moto ja esta com o passageiro (%7Bself.__passageiro.get_nome()%7D).%22)%0A#             return False%0A            %0A#         self.__passageiro = passageiro%0A#         self._iniciar_corrida() # Zera o custo ao iniciar%0A#         print(f%22ok: %7Bpassageiro.get_nome()%7D subiu como passageiro.%22)%0A#         return True%0A%0A#     def dirigir(self, km: float):%0A#         %22%22%22%0A#         Simula a corrida por 'km' quil%C3%B4metros.%0A#         Assume um custo (ex: R$ 1.0 por km).%0A#         %22%22%22%0A#         if self.__motorista is None or self.__passageiro is None:%0A#             print(%22fail: Corrida nao pode ser iniciada (falta motorista ou passageiro).%22)%0A#             return%0A            %0A#         custo_trecho = km * 1.0 # Define o pre%C3%A7o por km%0A#         self._adicionar_custo(custo_trecho)%0A#         print(f%22Dirigindo %7Bkm%7Dkm. Custo atual: R$ %7Bself.__custo:.2f%7D%22)%0A%0A#     def desembarcar(self):%0A#         %22%22%22%0A#         Finaliza a corrida. O passageiro paga ao motorista.%0A#         %22%22%22%0A#         if self.__passageiro is None:%0A#             print(%22fail: Nao ha passageiro para desembarcar.%22)%0A#             return%0A%0A#         # Garante que o motorista ainda est%C3%A1 l%C3%A1 (embora regras anteriores j%C3%A1 devam garantir)%0A#         if self.__motorista is None:%0A#             print(%22fail: ERRO INTERNO - Passageiro sem motorista para pagar.%22)%0A#             return%0A%0A#         print(f%22--- Fim da Corrida ---%22)%0A#         custo_final = self.get_custo()%0A        %0A#         # 1. Passageiro paga o que puder%0A#         valor_pago = self.__passageiro.pagar(custo_final)%0A        %0A#         # 2. Motorista recebe o valor (no contexto anterior, ele recebia o valor total)%0A#         # Assumindo que o motorista recebe apenas o que foi pago pelo passageiro:%0A#         # self.__motorista.receber(valor_pago)%0A        %0A#         # Assumindo a regra do %22Uber%22 (motorista recebe o valor completo):%0A#         self.__motorista.receber(custo_final)%0A        %0A#         print(f%22ok: %7Bself.__passageiro.get_nome()%7D desembarcou.%22)%0A        %0A#         # Limpa a moto para a pr%C3%B3xima corrida%0A#         self.__passageiro = None%0A#         self._iniciar_corrida() # Zera o custo%0A%0A#     def __str__(self) -%3E str:%0A#         %22%22%22Retorna uma representa%C3%A7%C3%A3o em string da moto.%22%22%22%0A#         motorista_str = self.__motorista.get_nome() if self.__motorista else %22vazio%22%0A#         passageiro_str = self.__passageiro.get_nome() if self.__passageiro else %22vazio%22%0A#         return f%22Moto %5BMotorista: %7Bmotorista_str%7D, Passageiro: %7Bpassageiro_str%7D, Custo: R$ %7Bself.__custo:.2f%7D%5D\n+nome = nome%0A        self.dinheiro = dinheiro%0A%0A    def pagar(self, valor: float) -%3E float:%0A        if self.dinheiro %3E= valor:%0A            self.dinheiro -= valor%0A            print(f%22%5B%7Bself.nome%7D%5D Pagou R$ %7Bvalor:.2f%7D.%22)%0A            return valor%0A        else:%0A            valor_pago = self.dinheiro%0A            self.dinheiro = 0%0A            print(f%22%5B%7Bself.nome%7D%5D N%C3%A3o tinha R$ %7Bvalor:.2f%7D, pagou apenas R$ %7Bvalor_pago:.2f%7D.%22)%0A            return valor_pago%0A%0A    def receber(self, valor: float):%0A        %22%22%22Recebe um valor em dinheiro.%22%22%22%0A        self.dinheiro += valor%0A        print(f%22%5B%7Bself.nome%7D%5D Recebeu R$ %7Bvalor:.2f%7D.%22)%0A%0A    def __str__(self) -%3E str:%0A        return f%22%7Bself.nome%7D (R$ %7Bself.dinheiro:.2f%7D)\n %22\n",
            "lines": "23"
        },
        {
            "label": "2025-10-28_11-46-26",
            "content": "@@ -242,32 +242,33 @@\n elf.__dinheiro%0A%0A\n+%0A\n     def pagar(se\n@@ -287,32 +287,33 @@\n loat) -%3E float:%0A\n+%0A\n         if valor\n@@ -341,29 +341,16 @@\n urn 0.0%0A\n-            %0A\n         \n@@ -411,24 +411,84 @@\n ro -= valor%0A\n+            print(f%22%5B%7Bself.__nome%7D%5D Pagou R$ %7Bvalor:.2f%7D.%22)%0A\n             \n@@ -585,24 +585,110 @@\n heiro = 0.0%0A\n+            print(f%22%5B%7Bself.__nome%7D%5D Insuficiente! Pagou apenas R$ %7Bvalor_pago:.2f%7D.%22)%0A\n             \n@@ -806,241 +806,716 @@\n lor%0A\n-%0A    def __str__(self) -%3E str:%0A        if self.__dinheiro == int(self.__dinheiro):%0A            return f%22%7Bself.__nome%7D:%7Bint(self.__dinheiro)%7D%22%0A        return f%22%7Bself.__nome%7D:%7Bself.__dinheiro:.2f%7D%22%0A%0Aclass Moto:%0A    def __init__(self):%0A\n+            print(f%22%5B%7Bself.__nome%7D%5D Recebeu R$ %7Bvalor:.2f%7D.%22)%0A%0A    def __str__(self) -%3E str:%0A        return f%22Pessoa%5BNome: %7Bself.__nome%7D, Dinheiro: R$ %7Bself.__dinheiro:.2f%7D%5D%22%0A%0A# class Moto:%0A#     %22%22%22%0A#     Representa a moto, gerenciando o motorista, o passageiro e o custo da corrida.%0A#     %22%22%22%0A    %0A#     def __init__(self):%0A#         %22%22%22%0A#         Inicializa a Moto.%0A        %0A#         Atributos:%0A#             __motorista (Pessoa %7C None): O motorista atual (privado).%0A#             __passageiro (Pessoa %7C None): O passageiro atual (privado).%0A#             __custo (float): O custo acumulado da corrida atual (privado).%0A#         %22%22%22%0A#         # Usamos 'Optional%5BPessoa%5D' ou 'Pessoa %7C None' para tipagem%0A# \n     \n@@ -1552,32 +1552,34 @@\n %5BPessoa%5D = None%0A\n+# \n         self.__p\n@@ -1613,16 +1613,18 @@\n  = None%0A\n+# \n         \n@@ -1654,57 +1654,188 @@\n .0%0A%0A\n-    def get_motorista(self) -%3E Optional%5BPessoa%5D:%0A\n+#     # --- Modificadores de Acesso (Getters) ---%0A    %0A#     def get_motorista(self) -%3E Optional%5BPessoa%5D:%0A#         %22%22%22Retorna o objeto Pessoa do motorista, ou None se vazio.%22%22%22%0A# \n     \n@@ -1862,16 +1862,19 @@\n torista%0A\n+%0A# \n     def \n@@ -1915,16 +1915,91 @@\n essoa%5D:%0A\n+#         %22%22%22Retorna o objeto Pessoa do passageiro, ou None se vazio.%22%22%22%0A# \n         \n@@ -2019,24 +2019,27 @@\n _passageiro%0A\n+%0A# \n     def get_\n@@ -2064,70 +2064,362 @@\n at:%0A\n-        return self.__custo%0A%0A#     def _iniciar_corrida(self):\n+#         %22%22%22Retorna o custo atual da corrida.%22%22%22%0A#         return self.__custo%0A%0A#     # --- M%C3%A9todos %22Internos%22 (Privados/Protegidos) ---%0A#     # Usamos '_' (protegido) para m%C3%A9todos que s%C3%B3 devem ser chamados por outros m%C3%A9todos da classe%0A    %0A#     def _iniciar_corrida(self):%0A#         %22%22%22M%C3%A9todo interno para zerar o custo ao iniciar uma nova corrida.%22%22%22\n %0A#  \n@@ -2444,16 +2444,17 @@\n o = 0.0%0A\n+%0A\n #     de\n@@ -2485,32 +2485,105 @@\n  valor: float):%0A\n+#         %22%22%22M%C3%A9todo interno para adicionar valor ao custo da corrida.%22%22%22%0A\n #         if val\n@@ -2651,36 +2651,34 @@\n dos \n-de A%C3%A7%C3%A3o (Adaptados aos teste\n+Necess%C3%A1rios (A%C3%A7%C3%B5es P%C3%BAblica\n s) -\n@@ -2692,24 +2692,30 @@\n    def s\n-etDriver\n+ubir_motorista\n (self, m\n@@ -2769,35 +2769,128 @@\n     \n-(Substitui subir_motorista)\n+Permite que um motorista suba na moto.%0A#         S%C3%B3 pode subir se n%C3%A3o houver outro motorista e se n%C3%A3o houver passageiro.\n %0A#  \n@@ -2985,32 +2985,64 @@\n ste um motorista\n+ (%7Bself.__motorista.get_nome()%7D)\n .%22)%0A#           \n@@ -3048,32 +3048,41 @@\n    return False%0A\n+        %0A\n #         if sel\n@@ -3207,32 +3207,45 @@\n    return False%0A\n+            %0A\n #         self._\n@@ -3281,115 +3281,896 @@\n     \n-return True%0A%0A#     def setPass(self, passageiro: Pessoa) -%3E bool:%0A#         %22%22%22%0A#         (Substitui subir_\n+print(f%22ok: %7Bmotorista.get_nome()%7D subiu como motorista.%22)%0A#         return True%0A%0A#     def descer_motorista(self) -%3E bool:%0A#         %22%22%22%0A#         Permite que o motorista des%C3%A7a.%0A#         S%C3%B3 pode descer se n%C3%A3o houver um passageiro (corrida em andamento).%0A#         %22%22%22%0A#         if self.__motorista is None:%0A#             print(%22fail: Moto ja esta sem motorista.%22)%0A#             return False%0A            %0A#         if self.__passageiro is not None:%0A#             print(%22fail: Motorista nao pode descer durante uma corrida.%22)%0A#             return False%0A            %0A#         print(f%22ok: %7Bself.__motorista.get_nome()%7D desceu da moto.%22)%0A#         self.__motorista = None%0A#         return True%0A%0A#     def subir_passageiro(self, passageiro: Pessoa) -%3E bool:%0A#         %22%22%22%0A#         Permite que um passageiro suba na moto.%0A#         S%C3%B3 pode subir se houver um motorista e se n%C3%A3o houver outro \n pass\n@@ -4175,17 +4175,17 @@\n ssageiro\n-)\n+.\n %0A#      \n@@ -4316,32 +4316,45 @@\n    return False%0A\n+            %0A\n #         if sel\n@@ -4426,16 +4426,18 @@\n sta com \n+o \n passagei\n@@ -4438,16 +4438,49 @@\n ssageiro\n+ (%7Bself.__passageiro.get_nome()%7D)\n .%22)%0A#   \n@@ -4502,16 +4502,29 @@\n n False%0A\n+            %0A\n #       \n@@ -4593,2913 +4593,2304 @@\n da()\n-%0A#         return True%0A%0A#     def drive(self, km: float):%0A#         %22%22%22%0A#         (Substitui dirigir)%0A#         %22%22%22%0A#         if self.__motorista is None or self.__passageiro is None:%0A#             print(%22fail: Corrida nao pode ser iniciada.%22)%0A#             return%0A        %0A#         # Custo de 1 real por km (conforme inferido dos testes)%0A#         custo_trecho = km * 1.0 %0A#         self._adicionar_custo(custo_trecho)%0A%0A#     def leavePass(self):%0A#         %22%22%22%0A#         (Substitui desembarcar) - Implementa a l%C3%B3gica de pagamento.%0A#         %22%22%22%0A#         if self.__passageiro is None:%0A#             print(%22fail: Nao ha passageiro para desembarcar.%22)%0A#             return%0A#         if self.__motorista is None:%0A#             print(%22fail: ERRO INTERNO - Passageiro sem motorista.%22)%0A#             return%0A%0A#         custo_final = self.get_custo()%0A        %0A#         # 1. Passageiro paga o que puder%0A#         valor_pago = self.__passageiro.pagar(custo_final)%0A        %0A#         # 2. Verifica se foi %22fiado%22 (Teste 2)%0A#         if valor_pago %3C custo_final:%0A#             print(%22fail: Passenger does not have enough money%22)%0A%0A#         # 3. Motorista recebe o valor TOTAL (Uber cobre a diferen%C3%A7a)%0A#         self.__motorista.receber(custo_final)%0A        %0A#         # 4. Imprime o status final do passageiro (Ex: Ana:0 left)%0A#         print(f%22%7Bself.__passageiro%7D left%22)%0A        %0A#         # 5. Reseta a corrida%0A#         self.__passageiro = None%0A#         self._iniciar_corrida()%0A%0A    def __str__(self) -%3E str:%0A        motorista_str = str(self.__motorista) if self.__motorista else %22None%22%0A        passageiro_str = str(self.__passageiro) if self.__passageiro else %22None%22%0A        %0A        custo_str = %22%22%0A        if self.__custo == int(self.__custo):%0A            custo_str = str(int(self.__custo))%0A        else:%0A            custo_str = f%22%7Bself.__custo:.2f%7D%22%0A            %0A        return f%22Cost: %7Bcusto_str%7D, Driver: %7Bmotorista_str%7D, Passenger: %7Bpassageiro_str%7D%22%0A%0Adef main():%0A    moto = Moto()%0A    while True:%0A        try:%0A            line = input()%0A        except EOFError:%0A            break%0A        except Exception:%0A            break%0A        print(%22$%22 + line)%0A        args = line.split(%22 %22)%0A        if not args or args%5B0%5D == %22%22:%0A            continue%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif command == %22setDriver%22:%0A                nome = str(args%5B1%5D)%0A                dinheiro = float(args%5B2%5D)%0A                pessoa = Pessoa(nome, dinheiro)%0A                moto.setDriver(pessoa)%0A        elif command == %22setPass%22:%0A                nome = str(args%5B1%5D)%0A                dinheiro = float(args%5B2%5D)%0A                pessoa = Pessoa(nome, dinheiro)%0A                moto.setPass(pessoa)%0A        elif command == %22show%22:%0A            print(moto)%0A        elif command == %22leavePass%22:%0A            moto.leavePass()%0A        elif command == %22drive%22:%0A            km = float(args%5B1%5D)%0A            moto.drive(km)%0A%0Amain()\n+ # Zera o custo ao iniciar%0A#         print(f%22ok: %7Bpassageiro.get_nome()%7D subiu como passageiro.%22)%0A#         return True%0A%0A#     def dirigir(self, km: float):%0A#         %22%22%22%0A#         Simula a corrida por 'km' quil%C3%B4metros.%0A#         Assume um custo (ex: R$ 1.0 por km).%0A#         %22%22%22%0A#         if self.__motorista is None or self.__passageiro is None:%0A#             print(%22fail: Corrida nao pode ser iniciada (falta motorista ou passageiro).%22)%0A#             return%0A            %0A#         custo_trecho = km * 1.0 # Define o pre%C3%A7o por km%0A#         self._adicionar_custo(custo_trecho)%0A#         print(f%22Dirigindo %7Bkm%7Dkm. Custo atual: R$ %7Bself.__custo:.2f%7D%22)%0A%0A#     def desembarcar(self):%0A#         %22%22%22%0A#         Finaliza a corrida. O passageiro paga ao motorista.%0A#         %22%22%22%0A#         if self.__passageiro is None:%0A#             print(%22fail: Nao ha passageiro para desembarcar.%22)%0A#             return%0A%0A#         # Garante que o motorista ainda est%C3%A1 l%C3%A1 (embora regras anteriores j%C3%A1 devam garantir)%0A#         if self.__motorista is None:%0A#             print(%22fail: ERRO INTERNO - Passageiro sem motorista para pagar.%22)%0A#             return%0A%0A#         print(f%22--- Fim da Corrida ---%22)%0A#         custo_final = self.get_custo()%0A        %0A#         # 1. Passageiro paga o que puder%0A#         valor_pago = self.__passageiro.pagar(custo_final)%0A        %0A#         # 2. Motorista recebe o valor (no contexto anterior, ele recebia o valor total)%0A#         # Assumindo que o motorista recebe apenas o que foi pago pelo passageiro:%0A#         # self.__motorista.receber(valor_pago)%0A        %0A#         # Assumindo a regra do %22Uber%22 (motorista recebe o valor completo):%0A#         self.__motorista.receber(custo_final)%0A        %0A#         print(f%22ok: %7Bself.__passageiro.get_nome()%7D desembarcou.%22)%0A        %0A#         # Limpa a moto para a pr%C3%B3xima corrida%0A#         self.__passageiro = None%0A#         self._iniciar_corrida() # Zera o custo%0A%0A#     def __str__(self) -%3E str:%0A#         %22%22%22Retorna uma representa%C3%A7%C3%A3o em string da moto.%22%22%22%0A#         motorista_str = self.__motorista.get_nome() if self.__motorista else %22vazio%22%0A#         passageiro_str = self.__passageiro.get_nome() if self.__passageiro else %22vazio%22%0A#         return f%22Moto %5BMotorista: %7Bmotorista_str%7D, Passageiro: %7Bpassageiro_str%7D, Custo: R$ %7Bself.__custo:.2f%7D%5D%22\n",
            "lines": "183"
        },
        {
            "label": "2025-10-28_12-03-32",
            "content": "@@ -926,29 +926,32 @@\n orista: \n-Pessoa %7C None\n+Optional%5BPessoa%5D\n  = None%0A\n@@ -977,29 +977,32 @@\n ageiro: \n-Pessoa %7C None\n+Optional%5BPessoa%5D\n  = None%0A\n@@ -1063,37 +1063,40 @@\n ta(self) -%3E \n-Pessoa %7C None\n+Optional%5BPessoa%5D\n :%0A        re\n@@ -1153,21 +1153,24 @@\n  -%3E \n-Pessoa %7C None\n+Optional%5BPessoa%5D\n :%0A  \n",
            "lines": "168"
        },
        {
            "label": "2025-10-28_12-05-30",
            "content": "@@ -4685,39 +4685,39 @@\n ak%0A        elif \n-args%5B0%5D\n+command\n  == %22setDriver%22:\n@@ -4891,31 +4891,31 @@\n        elif \n-args%5B0%5D\n+command\n  == %22setPass\n@@ -5089,31 +5089,31 @@\n        elif \n-args%5B0%5D\n+command\n  == %22show%22:%0A\n@@ -5145,31 +5145,31 @@\n        elif \n-args%5B0%5D\n+command\n  == %22leavePa\n@@ -5215,23 +5215,23 @@\n    elif \n-args%5B0%5D\n+command\n  == %22dri\n",
            "lines": "168"
        },
        {
            "label": "2025-10-28_12-06-38",
            "content": "@@ -1251,16 +1251,18 @@\n _custo%0A%0A\n+# \n     def \n@@ -1277,32 +1277,34 @@\n _corrida(self):%0A\n+# \n         self.__c\n@@ -1314,20 +1314,22 @@\n o = 0.0%0A\n+#\n     \n+ \n def _adi\n@@ -1354,32 +1354,34 @@\n  valor: float):%0A\n+# \n         if valor\n@@ -1378,32 +1378,34 @@\n   if valor %3E 0:%0A\n+# \n             self\n@@ -1427,60 +1427,186 @@\n or%0A%0A\n-    def setDriver(self, motorista: Pessoa) -%3E bool:%0A\n+#     # --- M%C3%A9todos de A%C3%A7%C3%A3o (Adaptados aos testes) ---%0A%0A#     def setDriver(self, motorista: Pessoa) -%3E bool:%0A#         %22%22%22%0A#         (Substitui subir_motorista)%0A#         %22%22%22%0A# \n     \n@@ -1634,32 +1634,33 @@\n ta is not None:%0A\n+#\n             prin\n@@ -1647,32 +1647,33 @@\n e:%0A#            \n+ \n print(f%22fail: Ja\n@@ -1692,24 +1692,26 @@\n otorista.%22)%0A\n+# \n             \n@@ -1723,24 +1723,25 @@\n n False%0A\n+#\n         \n if self.\n@@ -1724,32 +1724,33 @@\n  False%0A#        \n+ \n if self.__passag\n@@ -1763,24 +1763,26 @@\n s not None:%0A\n+# \n             \n@@ -1846,16 +1846,18 @@\n rida.%22)%0A\n+# \n         \n@@ -1873,16 +1873,18 @@\n n False%0A\n+# \n         \n@@ -1908,24 +1908,26 @@\n = motorista%0A\n+# \n         retu\n",
            "lines": "168"
        },
        {
            "label": "2025-10-28_12-08-35",
            "content": "@@ -1785,16 +1785,18 @@\n n True%0A%0A\n+# \n     def \n@@ -1830,32 +1830,101 @@\n essoa) -%3E bool:%0A\n+#         %22%22%22%0A#         (Substitui subir_passageiro)%0A#         %22%22%22%0A# \n         if self.\n@@ -1940,24 +1940,26 @@\n ta is None:%0A\n+# \n             \n@@ -2003,32 +2003,34 @@\n em motorista.%22)%0A\n+# \n             retu\n@@ -2030,32 +2030,34 @@\n    return False%0A\n+# \n         if self.\n@@ -2074,32 +2074,34 @@\n ro is not None:%0A\n+# \n             prin\n@@ -2137,24 +2137,26 @@\n ssageiro.%22)%0A\n+# \n             \n@@ -2164,32 +2164,33 @@\n eturn False%0A\n+#\n         \n self.__passa\n@@ -2169,32 +2169,33 @@\n  False%0A#        \n+ \n self.__passageir\n@@ -2205,24 +2205,26 @@\n  passageiro%0A\n+# \n         self\n@@ -2243,16 +2243,18 @@\n rrida()%0A\n+# \n         \n",
            "lines": "163"
        },
        {
            "label": "2025-10-28_12-10-11",
            "content": "@@ -2171,32 +2171,34 @@\n    return True%0A%0A\n+# \n     def drive(se\n@@ -2213,17 +2213,76 @@\n float):%0A\n-%0A\n+#         %22%22%22%0A#         (Substitui dirigir)%0A#         %22%22%22%0A# \n         \n@@ -2331,32 +2331,34 @@\n ageiro is None:%0A\n+# \n             prin\n@@ -2395,24 +2395,26 @@\n iniciada.%22)%0A\n+# \n             \n",
            "lines": "160"
        },
        {
            "label": "2025-10-28_12-11-16",
            "content": "@@ -2359,24 +2359,101 @@\n urn%0A        \n+%0A#         # Custo de 1 real por km (conforme inferido dos testes)%0A#         \n custo_trecho\n@@ -2465,16 +2465,18 @@\n  * 1.0 %0A\n+# \n         \n",
            "lines": "158"
        },
        {
            "label": "2025-10-28_12-16-15",
            "content": "@@ -2433,16 +2433,17 @@\n recho)%0A%0A\n+#\n      def\n@@ -2460,17 +2460,115 @@\n (self):%0A\n-%0A\n+#         %22%22%22%0A#         (Substitui desembarcar) - Implementa a l%C3%B3gica de pagamento.%0A#         %22%22%22%0A#\n         \n@@ -2590,32 +2590,33 @@\n ageiro is None:%0A\n+#\n              pri\n@@ -2659,24 +2659,25 @@\n embarcar.%22)%0A\n+#\n             \n@@ -2676,32 +2676,33 @@\n          return%0A\n+#\n          if self\n@@ -2715,32 +2715,33 @@\n orista is None:%0A\n+#\n              pri\n@@ -2750,22 +2750,45 @@\n (%22fail: \n-Nao ha\n+ERRO INTERNO - Passageiro sem\n  motoris\n@@ -2789,19 +2789,21 @@\n otorista\n+.\n %22)%0A\n+#\n         \n@@ -2806,32 +2806,35 @@\n          return%0A\n+%0A# \n         custo_fi\n@@ -2868,58 +2868,171 @@\n     \n-valor_pago = self.__passageiro.pagar(custo_final)%0A\n+%0A#         # 1. Passageiro paga o que puder%0A#         valor_pago = self.__passageiro.pagar(custo_final)%0A        %0A#         # 2. Verifica se foi %22fiado%22 (Teste 2)%0A#\n     \n@@ -3065,16 +3065,17 @@\n _final:%0A\n+#\n         \n@@ -3100,45 +3100,116 @@\n Pass\n-ageiro nao tem dinheiro suficiente%22\n+enger does not have enough money%22)%0A%0A#         # 3. Motorista recebe o valor TOTAL (Uber cobre a diferen%C3%A7a\n )%0A\n+#\n     \n@@ -3252,32 +3252,102 @@\n final)%0A        %0A\n+#         # 4. Imprime o status final do passageiro (Ex: Ana:0 left)%0A#\n          print(f\n@@ -3375,32 +3375,65 @@\n left%22)%0A        %0A\n+#         # 5. Reseta a corrida%0A#\n          self.__\n@@ -3442,32 +3442,33 @@\n ssageiro = None%0A\n+#\n          self._i\n",
            "lines": "156"
        },
        {
            "label": "2025-10-28_12-21-37",
            "content": "@@ -2433,24 +2433,25 @@\n recho)%0A%0A    \n+ \n def leavePas\n",
            "lines": "145"
        },
        {
            "label": "2025-10-28_12-21-55",
            "content": "@@ -2689,28 +2689,24 @@\n urn%0A        \n-    \n custo_final \n@@ -2724,20 +2724,16 @@\n custo()%0A\n-    \n         \n@@ -2778,33 +2778,24 @@\n usto_final)%0A\n-        %0A\n          if \n",
            "lines": "145"
        },
        {
            "label": "2025-10-28_12-22-43",
            "content": "@@ -2502,32 +2502,33 @@\n ne:%0A            \n+ \n print(%22fail: Nao\n@@ -2566,32 +2566,33 @@\n .%22)%0A            \n+ \n return%0A         \n@@ -2612,32 +2612,33 @@\n orista is None:%0A\n+ \n             prin\n@@ -2669,32 +2669,33 @@\n a%22)%0A            \n+ \n return%0A        c\n@@ -2689,24 +2689,28 @@\n urn%0A        \n+  \n+  \n custo_final \n@@ -2724,24 +2724,28 @@\n get_custo()%0A\n+    \n         valo\n",
            "lines": "146"
        },
        {
            "label": "2025-10-28_12-23-22",
            "content": "@@ -2433,16 +2433,20 @@\n recho)%0A%0A\n+    \n def leav\n@@ -2458,24 +2458,25 @@\n (self):%0A\n+%0A\n         \n if self.\n@@ -2459,32 +2459,33 @@\n self):%0A%0A        \n+ \n if self.__passag\n@@ -2560,17 +2560,16 @@\n arcar.%22)\n- \n %0A       \n@@ -2580,32 +2580,33 @@\n  return%0A        \n+ \n if self.__motori\n@@ -2661,17 +2661,16 @@\n orista%22)\n- \n %0A       \n@@ -2681,17 +2681,16 @@\n  return%0A\n-%0A\n         \n@@ -2787,32 +2787,33 @@\n        %0A        \n+ \n if valor_pago %3C \n@@ -2829,32 +2829,33 @@\n al:%0A            \n+ \n print(%22fail: Pas\n@@ -2859,44 +2859,46 @@\n Pass\n-enger does not have enough money%22)%0A%0A\n+ageiro nao tem dinheiro suficiente%22)%0A \n     \n@@ -2940,32 +2940,33 @@\n final)%0A        %0A\n+ \n         print(f%22\n@@ -3001,32 +3001,33 @@\n        %0A        \n+ \n self.__passageir\n@@ -3027,32 +3027,33 @@\n ssageiro = None%0A\n+ \n         self._in\n",
            "lines": "146"
        },
        {
            "label": "2025-10-28_12-25-16",
            "content": "@@ -2668,32 +2668,33 @@\n          return%0A\n+%0A\n         custo_fi\n@@ -2766,32 +2766,41 @@\n ar(custo_final)%0A\n+        %0A\n         if valor\n",
            "lines": "147"
        },
        {
            "label": "2025-10-28_12-27-43",
            "content": "@@ -2433,20 +2433,16 @@\n recho)%0A%0A\n-    \n def leav\n",
            "lines": "145"
        },
        {
            "label": "2025-10-28_12-35-48",
            "content": "class Pessoa:\n    def __init__(self, nome: str, dinheiro: float):\n        self.__nome = nome\n        self.__dinheiro = dinheiro\n\n    def get_nome(self) -> str:\n        return self.__nome\n\n    def get_dinheiro(self) -> float:\n        return self.__dinheiro\n\n    def pagar(self, valor: float) -> float:\n        if valor < 0:\n            return 0.0\n            \n        if self.__dinheiro >= valor:\n            self.__dinheiro -= valor\n            return valor\n        else:\n            valor_pago = self.__dinheiro\n            self.__dinheiro = 0.0\n            return valor_pago\n\n    def receber(self, valor: float):\n        if valor > 0:\n            self.__dinheiro += valor\n\n    def __str__(self) -> str:\n        if self.__dinheiro == int(self.__dinheiro):\n            return f\"{self.__nome}:{int(self.__dinheiro)}\"\n        return f\"{self.__nome}:{self.__dinheiro:.2f}\"\n\nclass Moto:\n    def __init__(self):\n        self.__motorista: Pessoa | None = None\n        self.__passageiro: Pessoa | None = None\n        self.__custo: float = 0.0\n\n    def get_motorista(self) -> Pessoa | None:\n        return self.__motorista\n    def get_passageiro(self) -> Pessoa | None:\n        return self.__passageiro\n    def get_custo(self) -> float:\n        return self.__custo\n\n    def _iniciar_corrida(self):\n        self.__custo = 0.0\n    def _adicionar_custo(self, valor: float):\n        if valor > 0:\n            self.__custo += valor\n\n    def setDriver(self, motorista: Pessoa) -> bool:\n        if self.__motorista is not None:\n            print(f\"fail: Ja existe um motorista.\")\n            return False\n        if self.__passageiro is not None:\n            print(\"fail: Nao pode trocar de motorista durante uma corrida.\")\n            return False\n        self.__motorista = motorista\n        return True\n\n    def setPass(self, passageiro: Pessoa) -> bool:\n        if self.__motorista is None:\n            print(\"fail: Impossivel subir, moto sem motorista.\")\n            return False\n        if self.__passageiro is not None:\n            print(f\"fail: Moto ja esta com passageiro.\")\n            return False\n        self.__passageiro = passageiro\n        self._iniciar_corrida()\n        return True\n\n    def drive(self, km: float):\n\n        if self.__motorista is None or self.__passageiro is None:\n            print(\"fail: Corrida nao pode ser iniciada.\")\n            return\n        custo_trecho = km * 1.0 \n        self._adicionar_custo(custo_trecho)\n\n    def leavePass(self):\n        if self.__passageiro is None:\n            print(\"fail: Nao ha passageiro para desembarcar.\") \n            return\n        if self.__motorista is None:\n            print(\"fail: Nao ha motorista\") \n            return\n        custo_final = self.get_custo()\n        valor_pago = self.__passageiro.pagar(custo_final)\n        if valor_pago < custo_final:\n            print(\"fail: Passenger does not have enough money\")\n\n        self.__motorista.receber(custo_final)\n        \n        print(f\"{self.__passageiro} left\")\n        \n        self.__passageiro = None\n        self._iniciar_corrida()\n\n    def __str__(self) -> str:\n        motorista_str = str(self.__motorista) if self.__motorista else \"None\"\n        passageiro_str = str(self.__passageiro) if self.__passageiro else \"None\"\n        \n        custo_str = \"\"\n        if self.__custo == int(self.__custo):\n            custo_str = str(int(self.__custo))\n        else:\n            custo_str = f\"{self.__custo:.2f}\"\n            \n        return f\"Cost: {custo_str}, Driver: {motorista_str}, Passenger: {passageiro_str}\"\n\ndef main():\n    moto = Moto()\n    while True:\n        try:\n            line = input()\n        except EOFError:\n            break\n        except Exception:\n            break\n        print(\"$\" + line)\n        args = line.split(\" \")\n        if not args or args[0] == \"\":\n            continue\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"setDriver\":\n                nome = str(args[1])\n                dinheiro = float(args[2])\n                pessoa = Pessoa(nome, dinheiro)\n                moto.setDriver(pessoa)\n        elif args[0] == \"setPass\":\n                nome = str(args[1])\n                dinheiro = float(args[2])\n                pessoa = Pessoa(nome, dinheiro)\n                moto.setPass(pessoa)\n        elif args[0] == \"show\":\n            print(moto)\n        elif args[0] == \"leavePass\":\n            moto.leavePass()\n        elif args[0] == \"drive\":\n            km = float(args[1])\n            moto.drive(km)\n\nmain()",
            "lines": "145"
        }
    ]
}